#!/bin/sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

. $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

check_if_file_changed_in_range() {
  local filepath=$1
  local start=$2
  local end=$3

  if [ -n "$(git log --oneline $start..$end -- "$filepath")" ]; then
    echo "error: lock instance is no longer acquired"
    exit 1
  fi
}

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/pool-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
pool_name=$(jq -r '.source.pool // ""' < $payload)
depth=$(jq -r '.source.depth // ""' < $payload)
ref=$(jq -r '.version.ref // "HEAD"' < $payload)

if [ -z "$uri" ]; then
  config_errors="${config_errors}invalid payload (missing uri)\n"
fi

if [ -z "$branch" ]; then
  config_errors="${config_errors}invalid payload (missing branch)\n"
fi

if [ -z "$pool_name" ]; then
  config_errors="${config_errors}invalid payload (missing pool)\n"
fi

if [ -n "$config_errors" ]; then
  echo $config_errors
  exit 1
fi

branchflag=""
if [ -n "$branch" ]; then
  branchflag="--branch $branch"
fi

if [ -z "$depth" ]; then
  git clone $uri $branchflag $destination
else
  git clone $uri $branchflag $destination --depth $depth
fi

cd $destination

git checkout -q $ref
git log -1 --oneline
git clean --force --force -d

changed_filepath="$(git diff --name-only HEAD~1 | head -1)"
changed_filename="$(basename $changed_filepath)"

if [ -e "${pool_name}/claimed/${changed_filename}" ]; then
  # lock is claimed; ensure it hasn't been unclaimed + reclaimed since the sha
	check_if_file_changed_in_range $changed_filepath $ref $branch
fi

jq -n "{
  version: {ref: $(git rev-parse HEAD | jq -R .)},
  metadata: [{
    name: \"lock_name\",
    value: $(echo $changed_filename | jq -R .)
  },{
    name: \"pool_name\",
    value: $(echo $pool_name | jq -R .)
  }]
}" >&3

if [ ! -r $pool_name/*/${changed_filename} ]; then
	echo "lock does not exist";
	exit 0
fi

mkdir -p $1

cat $pool_name/*/${changed_filename} > ${1}/metadata
echo ${changed_filename} > ${1}/name
